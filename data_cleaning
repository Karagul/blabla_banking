 Pandas dataframe might be one of the best and most frequently used data structure in python data analyzing.As we know, trasactional data is often 
 saved in SQL databases, and analysts are more exposed to excel tables than sql databases because they  are often treated more as 
 business people than IT people.However, this doesn't mean that data analysts show any weakness in data structure things, and 
 python pandas serves them as the best playground.
 
step 1:import excel into python as dataframe
code :
import pandas as pd
#read in customer.xlsx as dataframe
df = pd.read_excel("customer.xlsx")
#load in the first line
df.head()

Here we generate an example dataframe:
 data = pd.DataFrame({'name':['cyrus'] * 3 + ['yolanda'] * 4,'daily_amount':[1, 1, 2, 3, 3, 4, 4]})
 output:
    daily_amount     name
0             1    cyrus
1             1    cyrus
2             2    cyrus
3             3  yolanda
4             3  yolanda
5             4  yolanda
6             4  yolanda

step 2: cleansing
scenario 1):
we are usually unhappy with duplicates,thus dataframe provides us a method to discover them
data.duplicated()
output:
0    False
1     True
2    False
3    False
4     True
5    False
6     True
dtype: bool
we can also use drop_duplicates() to return a dataframe without duplicates.
data.drop_duplicates()
output:
   daily_amount     name
0             1    cyrus
2             2    cyrus
3             3  yolanda
5             4  yolanda
Er,now we can get a cleaner dataframe,looks better, right?Actually we can delete duplicate rows based on a specific column, as follows:
data.drop_duplicates(['name'])
 output:
 daily_amount     name
0             1    cyrus
3             3  yolanda

scenario 2:
Unfortunately, we often need to deal with missing values in datasets.For example, if data2 = pd.DataFrame([1., -999, 2., -999, -1000., 3.]),and negative 
values stands for missing,then we can replace them with NAN using following method:
import numpy as np
data2.replace([-999,-1000],np.nan)
  output:
     0
0   1
1 NaN
2   2
3 NaN
4 NaN
5   3
if we want to replace values with different values, replace() can be written as follows:
data2.replace([-999, -1000], [np.nan, 0])   
output:
    0
0   1
1 NaN
2   2
3 NaN
4   0
5   3
or 
 data2.replace({-999: np.nan, -1000: 0})
 we can see that output is the same.
 
 
